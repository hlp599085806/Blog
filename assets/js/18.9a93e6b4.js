(window.webpackJsonp=window.webpackJsonp||[]).push([[18],{578:function(t,e,o){"use strict";o.r(e);var a=o(17),r=Object(a.a)({},(function(){var t=this,e=t.$createElement,o=t._self._c||e;return o("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[o("h1",{attrs:{id:"react生命周期"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#react生命周期"}},[t._v("#")]),t._v(" React生命周期")]),t._v(" "),o("h3",{attrs:{id:"生命周期的执行流程分为三类-组件初始化、组件更新-、组件销毁"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#生命周期的执行流程分为三类-组件初始化、组件更新-、组件销毁"}},[t._v("#")]),t._v(" 生命周期的执行流程分为三类："),o("span",{staticStyle:{color:"red"}},[t._v("组件初始化")]),t._v("、"),o("span",{staticStyle:{color:"red"}},[t._v("组件更新")]),t._v(">、"),o("span",{staticStyle:{color:"red"}},[t._v("组件销毁")]),t._v(">")]),t._v(" "),o("h3",{attrs:{id:"类组件初始化"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#类组件初始化"}},[t._v("#")]),t._v(" 类组件初始化")]),t._v(" "),o("h3",{attrs:{id:"_1-constructor"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#_1-constructor"}},[t._v("#")]),t._v(" 1. constructor")]),t._v(" "),o("p",[t._v("​\t初始化mount阶段首先执行的就是 constructor，用来继承React封装好的Compoent或者PureCompoent组件，目的是绑定props、state、context，并初始化ref，然后实例化组件，组件调用的setState，forceUpdate等方法，是在组件上绑定了updater对象，然后绑定在原型链上")]),t._v(" "),o("img",{staticStyle:{zoom:"80%"},attrs:{src:"http://rezpusy5t.hn-bkt.clouddn.com/322536a3231ddc14955436cc3469107e.png",alt:"322536a3231ddc14955436cc3469107e"}}),t._v(" "),o("h3",{attrs:{id:"_2-getderivedstatefromprops-新"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#_2-getderivedstatefromprops-新"}},[t._v("#")]),t._v(" 2. getDerivedStateFromProps（新）")]),t._v(" "),o("p",[t._v("​\t从类上直接绑定的静态方法，传入两个参数，新props和旧state，返回值与旧state进行合并，成为新的state")]),t._v(" "),o("p",[o("img",{attrs:{src:"http://rezpusy5t.hn-bkt.clouddn.com/3bc6ce066c4d8263c338f206b58fb37e.png",alt:"3bc6ce066c4d8263c338f206b58fb37e"}})]),t._v(" "),o("h3",{attrs:{id:"_3-componentwillmount"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#_3-componentwillmount"}},[t._v("#")]),t._v(" 3.componentWillMount")]),t._v(" "),o("p",[t._v("​\t如果存在 getDerivedStateFromProps 和 getSnapshotBeforeUpdate 就不会执行生命周期componentWillMount。")]),t._v(" "),o("h4",{attrs:{id:"_4-render"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#_4-render"}},[t._v("#")]),t._v(" 4. render")]),t._v(" "),o("p",[t._v("​\t到此为止类组件初始化的流程render阶段结束，即将进入到commit阶段，执行了render渲染函数，形成了children，接下来React调用reconcileChildren方法深度调和 children。")]),t._v(" "),o("h3",{attrs:{id:"_5-componentdidmount"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#_5-componentdidmount"}},[t._v("#")]),t._v(" 5.componentDidMount")]),t._v(" "),o("p",[t._v("​\t一旦React调和完所有的fiber节点，结束render阶段，进入commit阶段，在类组件初始化commit阶段，会调用componentDidMount生命周期。")]),t._v(" "),o("img",{staticStyle:{zoom:"80%"},attrs:{src:"http://rezpusy5t.hn-bkt.clouddn.com/ba54e644c4e2e1fdcf38212bdf14c9bb.png",alt:"ba54e644c4e2e1fdcf38212bdf14c9bb"}}),t._v(" "),o("p",[t._v("​\tcomponentDidMount和componentDidUpdate的执行时机是相同的，不过一个是组件初始化，一个是组件更新，到此，组件初始化阶段结束。")]),t._v(" "),o("p",[t._v("​\t执行顺序：constructor -> getDerivedStateFromProps / componentWillMount -> render -> componentDidMount")]),t._v(" "),o("img",{staticStyle:{zoom:"33%"},attrs:{src:"https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/9838872f404c474b87612400c3a6c504~tplv-k3u1fbpfcp-zoom-in-crop-mark:3402:0:0:0.awebp",alt:"lifesycle4.jpg"}}),t._v(" "),o("h3",{attrs:{id:"更新阶段"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#更新阶段"}},[t._v("#")]),t._v(" 更新阶段")]),t._v(" "),o("h3",{attrs:{id:"_1-componentwillreceiveprops"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#_1-componentwillreceiveprops"}},[t._v("#")]),t._v(" 1."),o("strong",[t._v("componentWillReceiveProps")])]),t._v(" "),o("p",[t._v("​\t\t\t首先判断 "),o("span",{staticStyle:{color:"red"}},[o("code",[t._v("getDerivedStateFromProps")])]),t._v(" 生命周期是否存在，如果不存在就执行"),o("span",{staticStyle:{color:"red"}},[o("code",[t._v("componentWillReceiveProps")])]),t._v("生命周期。传入该生命周期两个参数，分别是 newProps 和 nextContext 。")]),t._v(" "),o("h3",{attrs:{id:"_2-getderivedstatefromprops"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#_2-getderivedstatefromprops"}},[t._v("#")]),t._v(" 2."),o("strong",[t._v("getDerivedStateFromProps")])]),t._v(" "),o("p",[t._v("​\t\t\t接下来执行生命周期 "),o("span",{staticStyle:{color:"red"}},[o("code",[t._v("getDerivedStateFromProps")])]),t._v("， 返回的值用于合并state，生成新的state。")]),t._v(" "),o("h3",{attrs:{id:"_3-shouldcomponentupdate"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#_3-shouldcomponentupdate"}},[t._v("#")]),t._v(" 3."),o("strong",[t._v("shouldComponentUpdate")])]),t._v(" "),o("p",[t._v("​\t\t\t接下来执行生命周期"),o("span",{staticStyle:{color:"red"}},[o("code",[t._v("shouldComponentUpdate")])]),t._v("，传入新的 props ，新的 state ，和新的 context ，返回值决定是否继续执行 render 函数，调和子节点。这里应该注意一个问题，"),o("span",{staticStyle:{color:"red"}},[o("code",[t._v("getDerivedStateFromProps")])]),t._v("的返回值可以作为新的 state ，传递给 "),o("span",{staticStyle:{color:"red"}},[o("code",[t._v("shouldComponentUpdate")])]),t._v(" 。")]),t._v(" "),o("h3",{attrs:{id:"_4-componentwillupdate"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#_4-componentwillupdate"}},[t._v("#")]),t._v(" 4."),o("strong",[t._v("componentWillUpdate")])]),t._v(" "),o("p",[t._v("​\t\t\t接下来执行生命周期 "),o("span",{staticStyle:{color:"red"}},[o("code",[t._v("componentWillUpdate")])]),t._v("。组件即将更新的时候传入最新的props和最新的state，和最新的context。一般情况下不必使用该生命周期。")]),t._v(" "),o("h3",{attrs:{id:"_5-render"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#_5-render"}},[t._v("#")]),t._v(" 5.render")]),t._v(" "),o("p",[t._v("​\t\t\t执行render函数，得到最新的React element元素，继续调和子节点。")]),t._v(" "),o("h3",{attrs:{id:"_6-getsnapshotbeforeupdate"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#_6-getsnapshotbeforeupdate"}},[t._v("#")]),t._v(" 6."),o("strong",[t._v("getSnapshotBeforeUpdate")])]),t._v(" "),o("p",[t._v("​\t\t\t"),o("span",{staticStyle:{color:"red"}},[o("code",[t._v("getSnapshotBeforeUpdate")])]),t._v("的执行也是在 commit 阶段，commit 阶段细分为 "),o("span",{staticStyle:{color:"red"}},[o("code",[t._v("before Mutation")])]),t._v("( DOM 修改前)，"),o("span",{staticStyle:{color:"red"}},[o("code",[t._v("Mutation")])]),t._v(" ( DOM 修改)，"),o("span",{staticStyle:{color:"red"}},[o("code",[t._v("Layout")])]),t._v("( DOM 修改后) 三个阶段，getSnapshotBeforeUpdate 发生在"),o("span",{staticStyle:{color:"red"}},[o("code",[t._v("before Mutation")])]),t._v(" 阶段，生命周期的返回值，将作为第三个参数 __reactInternalSnapshotBeforeUpdate 传递给 componentDidUpdate 。")]),t._v(" "),o("h3",{attrs:{id:"_7-componentdidupdate"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#_7-componentdidupdate"}},[t._v("#")]),t._v(" 7."),o("strong",[t._v("componentDidUpdate")])]),t._v(" "),o("p",[t._v("​\t\t\t接下来执行生命周期 componentDidUpdate ，此时 DOM 已经修改完成。可以操作修改之后的 DOM 。")]),t._v(" "),o("img",{staticStyle:{zoom:"33%"},attrs:{src:"https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/de17c24547b040b9a93b01706d9e585b~tplv-k3u1fbpfcp-zoom-in-crop-mark:3402:0:0:0.awebp",alt:"lifecycle5.jpg"}}),t._v(" "),o("p",[t._v("​\t执行顺序:")]),t._v(" "),o("p",[t._v("​\t\tcomponentWillReceiveProps( props 改变) / getDerivedStateFromProp -> shouldComponentUpdate -> componentWillUpdate -> render -> getSnapshotBeforeUpdate -> componentDidUpdate")]),t._v(" "),o("h3",{attrs:{id:"销毁阶段"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#销毁阶段"}},[t._v("#")]),t._v(" 销毁阶段")]),t._v(" "),o("h3",{attrs:{id:"_1-componentwillunmount"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#_1-componentwillunmount"}},[t._v("#")]),t._v(" 1."),o("strong",[t._v("componentWillUnmount")])]),t._v(" "),o("p",[t._v("​\t\t\t在调和更新中，如果发现组件被移除，会被打上对应的"),o("span",{staticStyle:{color:"red"}},[t._v("删除Tag")]),t._v(",然后在commit阶段执行componentWillUnmount生命周期，统一来卸载组件和DOM元素。")]),t._v(" "),o("h3",{attrs:{id:"总结"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#总结"}},[t._v("#")]),t._v(" 总结")]),t._v(" "),o("img",{staticStyle:{zoom:"33%"},attrs:{src:"http://rezpusy5t.hn-bkt.clouddn.com/image-20220309191323105.png",alt:"image-20220309191323105"}})])}),[],!1,null,null,null);e.default=r.exports}}]);