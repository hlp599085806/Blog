(window.webpackJsonp=window.webpackJsonp||[]).push([[14],{577:function(t,s,a){"use strict";a.r(s);var n=a(17),e=Object(n.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"javascript深入之词法作用域和动态作用域"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#javascript深入之词法作用域和动态作用域"}},[t._v("#")]),t._v(" JavaScript深入之词法作用域和动态作用域")]),t._v(" "),a("h3",{attrs:{id:"作用域"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#作用域"}},[t._v("#")]),t._v(" "),a("strong",[t._v("作用域")])]),t._v(" "),a("p",[t._v("作用域指的是程序源代码中定义变量的区域。")]),t._v(" "),a("p",[t._v("作用域规定了如何查找变量，就是确定当前执行代码对变量的访问权限。")]),t._v(" "),a("p",[t._v("JS采用的是词法作用域(lexical scoping)，也就是静态作用域。")]),t._v(" "),a("h3",{attrs:{id:"静态作用域与动态作用域"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#静态作用域与动态作用域"}},[t._v("#")]),t._v(" "),a("strong",[t._v("静态作用域与动态作用域")])]),t._v(" "),a("p",[t._v("静态作用域代表着函数的作用域在函数定义的时候就已经决定了。")]),t._v(" "),a("p",[t._v("动态作用域代表着函数的作用域是在函数调用执行的时候才决定的。")]),t._v(" "),a("p",[a("strong",[t._v("例子")])]),t._v(" "),a("div",{staticClass:"language-javascript extra-class"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" a "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" t"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("**")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("est")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\nconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'a'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("text")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" a "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("test")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("text")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// ?")]),t._v("\n")])])]),a("p",[t._v("看到这里大家都知道结果，'a'1。正是因为JS采用的是静态作用域，即使test函数是在text函数上下文中，先查到自己内部的变量，若没有，查找上一层作用域的变量，也就是找到了全局变量a。")]),t._v(" "),a("p",[t._v("那么假设JS采用的是动态的作用域，那么处于text函数上下文中，先查到自己内部的变量，若没有，则向上一层作用域查找，也就是text函数内部，即找到局部变量a为2。")])])}),[],!1,null,null,null);s.default=e.exports}}]);